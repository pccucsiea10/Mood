// Generated by view binder compiler. Do not edit!
package com.ehappy.mood.databinding;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.constraint.ConstraintLayout;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.viewbinding.ViewBinding;
import android.viewbinding.ViewBindings;
import android.widget.Button;
import android.widget.TextView;
import com.ehappy.mood.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityTestBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button Happy;

  @NonNull
  public final Button Sad;

  @NonNull
  public final Button back3;

  @NonNull
  public final TextView choose;

  @NonNull
  public final Button normal;

  @NonNull
  public final Button original;

  private ActivityTestBinding(@NonNull ConstraintLayout rootView, @NonNull Button Happy,
      @NonNull Button Sad, @NonNull Button back3, @NonNull TextView choose, @NonNull Button normal,
      @NonNull Button original) {
    this.rootView = rootView;
    this.Happy = Happy;
    this.Sad = Sad;
    this.back3 = back3;
    this.choose = choose;
    this.normal = normal;
    this.original = original;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityTestBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityTestBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_test, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityTestBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Happy;
      Button Happy = ViewBindings.findChildViewById(rootView, id);
      if (Happy == null) {
        break missingId;
      }

      id = R.id.Sad;
      Button Sad = ViewBindings.findChildViewById(rootView, id);
      if (Sad == null) {
        break missingId;
      }

      id = R.id.back3;
      Button back3 = ViewBindings.findChildViewById(rootView, id);
      if (back3 == null) {
        break missingId;
      }

      id = R.id.choose;
      TextView choose = ViewBindings.findChildViewById(rootView, id);
      if (choose == null) {
        break missingId;
      }

      id = R.id.normal;
      Button normal = ViewBindings.findChildViewById(rootView, id);
      if (normal == null) {
        break missingId;
      }

      id = R.id.original;
      Button original = ViewBindings.findChildViewById(rootView, id);
      if (original == null) {
        break missingId;
      }

      return new ActivityTestBinding((ConstraintLayout) rootView, Happy, Sad, back3, choose, normal,
          original);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
